[gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES]
variable_test_duration:              60    ; test duartion in minutes
variable_report_cycle:               60    ; report temperatures every x seconds

variable_temperature_bed:            90
variable_temperature_extruder:        0

variable_park_toolhead_center:     True
variable_park_toolhead_z_height:    100



# --- DO NOT EDIT BELOW THIS LINE --- #

variable_cancel_test:             False
variable_sensor_count:                0
variable_sensor0_name:               ''
variable_sensor1_name:               ''
variable_sensor2_name:               ''
variable_sensor3_name:               ''
variable_sensor4_name:               ''
variable_sensor5_name:               ''
variable_sensor6_name:               ''
variable_sensor7_name:               ''
variable_sensor8_name:               ''
variable_sensor9_name:               ''

gcode:

[gcode_macro HEATSOAK_PERFORMANCE]
description: TEST TEMPSENSORS
gcode:
    #{% set test_duration = params.DUR|default(100)|int %}
    #{% set report_cycle = 60 | int %}   

    {% set temp_sensors = printer['heaters'].available_sensors | sort %}
    {% set sensor_count = temp_sensors | length %}

    {action_respond_info(">>>----------------------------------<<<")}
    {action_respond_info("START HEATSOAK PERFORMANCE TEST!")}
    {action_respond_info("----------------------------------------")}
    {action_respond_info("Test duration: %s min" % printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].test_duration)}
    {action_respond_info("Report cycle: %s sec" % printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].report_cycle)}
    {action_respond_info("----------------------------------------")}
    {action_respond_info("Temperature sensor count: %s" % sensor_count)}
    {action_respond_info("List of available temperature sensors:")}
    {% for i in range(temp_sensors|length) %}
        {action_respond_info("Sensor[%s]: %s" % (i, temp_sensors[i] if i <= 1 else temp_sensors[i][18:] ) )}
    {% endfor %}
    {action_respond_info("----------------------------------------")}
    {% if printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].park_toolhead_center|lower == 'true' %}
        {action_respond_info("> Home all axis <")}
        G28
        {action_respond_info("> Move to center location X%.2f Y%.2f Z%.2f <" % (printer.toolhead.axis_maximum.x//2, printer.toolhead.axis_maximum.y//2, printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].park_toolhead_z_height|float))}
        G0 X{printer.toolhead.axis_maximum.x//2} Y{printer.toolhead.axis_maximum.y//2} Z{printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].park_toolhead_z_height|float} F3000
        {action_respond_info("----------------------------------------")}
    {% endif %}




[gcode_macro HEATSOAK_PERFORMANCE_REPORT_LOOP]
gcode:

    {% set temp_sensors = printer['heaters'].available_sensors | sort %}
    {% set sensor_count = temp_sensors | length %}

    {% for i in range(temp_sensors|length) %}
        {action_respond_info("Sensor %s: %s" % (i, temp_sensors[i] if i <= 1 else temp_sensors[i][18:] ) )}
    {% endfor %}

    SET_GCODE_VARIABLE MACRO=_HEATSOAK_PERFORMANCE_VARIABLES VARIABLE=sensor_count VALUE={ sensor_count }

    {% if sensor_count > 0 %}
        SET_GCODE_VARIABLE MACRO=_HEATSOAK_PERFORMANCE_VARIABLES VARIABLE=sensor0_name VALUE='"{ temp_sensors[0] }"'
    {% endif %}

    {% if sensor_count > 1 %}
        SET_GCODE_VARIABLE MACRO=_HEATSOAK_PERFORMANCE_VARIABLES VARIABLE=sensor1_name VALUE='"{ temp_sensors[1] }"'
    {% endif %}

    {% if sensor_count > 2 %}
        SET_GCODE_VARIABLE MACRO=_HEATSOAK_PERFORMANCE_VARIABLES VARIABLE=sensor2_name VALUE='"{ temp_sensors[2] }"'
    {% endif %}

    {% if sensor_count > 3 %}
        SET_GCODE_VARIABLE MACRO=_HEATSOAK_PERFORMANCE_VARIABLES VARIABLE=sensor3_name VALUE='"{ temp_sensors[3] }"'
    {% endif %}

    {% if sensor_count > 4 %}
        SET_GCODE_VARIABLE MACRO=_HEATSOAK_PERFORMANCE_VARIABLES VARIABLE=sensor4_name VALUE='"{ temp_sensors[4] }"'
    {% endif %}

    {% if sensor_count > 5 %}
        SET_GCODE_VARIABLE MACRO=_HEATSOAK_PERFORMANCE_VARIABLES VARIABLE=sensor5_name VALUE='"{ temp_sensors[5] }"'
    {% endif %}

    {% if sensor_count > 6 %}
        SET_GCODE_VARIABLE MACRO=_HEATSOAK_PERFORMANCE_VARIABLES VARIABLE=sensor6_name VALUE='"{ temp_sensors[6] }"'
    {% endif %}

    {% if sensor_count > 7 %}
        SET_GCODE_VARIABLE MACRO=_HEATSOAK_PERFORMANCE_VARIABLES VARIABLE=sensor7_name VALUE='"{ temp_sensors[7] }"'
    {% endif %}

    {% if sensor_count > 7 %}
        SET_GCODE_VARIABLE MACRO=_HEATSOAK_PERFORMANCE_VARIABLES VARIABLE=sensor8_name VALUE='"{ temp_sensors[8] }"'
    {% endif %}

    {% if sensor_count > 9 %}
        SET_GCODE_VARIABLE MACRO=_HEATSOAK_PERFORMANCE_VARIABLES VARIABLE=sensor9_name VALUE='"{ temp_sensors[9] }"'
    {% endif %}

    UPDATE_DELAYED_GCODE ID=TEST_P DURATION=10

[delayed_gcode TEST_P]
gcode:
    {% set sensor0 = printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].sensor0_name|string %}
    {% set sensor1 = printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].sensor1_name|string %}
    {% set sensor2 = printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].sensor2_name|string %}
    {% set sensor3 = printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].sensor3_name|string %}
    {% set sensor4 = printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].sensor4_name|string %}
    {% set sensor5 = printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].sensor5_name|string %}
    {% set sensor6 = printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].sensor6_name|string %}
    {% set sensor7 = printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].sensor7_name|string %}
    {% set sensor8 = printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].sensor8_name|string %}
    {% set sensor9 = printer["gcode_macro _HEATSOAK_PERFORMANCE_VARIABLES"].sensor9_name|string %}

    {action_respond_info("%s" % sensor0)}
#printer["generic_heater my_chamber_heater"].temperature


    {action_respond_info("%s" % sensor1)}
    {action_respond_info("%s" % sensor2)}
    {action_respond_info("%s" % sensor3)}
    {action_respond_info("%s" % sensor4)}
    {action_respond_info("%s" % sensor5)}
    {action_respond_info("%s" % sensor6)}
    {action_respond_info("%s" % sensor7)}
    {action_respond_info("%s" % sensor8)}
    {action_respond_info("%s" % sensor9)}



#####################################################################
#   debug_macros.cfg
#####################################################################
# - DUMP_PARAMETER                       print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST' print the defined parameter group
# - DUMP_PARAMETER C='printer'           print the defined config values
# - DUMP_PARAMETER S='printer'           print the defined settings values


[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object
gcode:
  {% set config = True if params.C or params.S else False %}
  {% set path = 'config'   if params.C 
           else 'settings' if params.S %}
  {% set search = params.C if params.C
             else params.S if params.S
             else params.P if params.P %}
  {% set out = [] %}
  {% for name1 in printer|sort %}
    {% if config %}
      {% if name1 is in ['configfile'] %}
        {% for name2 in printer[name1][path]|sort %}
          {% if name2 is in [search] %}
            {% for name3, value in printer[name1][path][name2].items()|sort %}
              {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
                          (path, name2, name3, value)) %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% else %}
      {% for name2, value in printer[name1].items()|sort %}
        {% if search is not defined and name1 is not in ['configfile'] %}
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% elif search is defined and name1 is in [search] %}
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}
  {% if out|length > 0 %}
    {action_respond_info(out|join("\n"))}
  {% else %}
    {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
  {% endif %}


##-------------------------------------------------------------------


[gcode_macro DUMP_PRINT_AREA_LIMITS]
description: Debug: Print information about print volume and probeable area
gcode:
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
                         'y' : printer.configfile.settings.probe.y_offset} %}
  {% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
                                'y' : [min.y,(min.y-probe_offset.y)]|max},
                       'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
                                'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
  {action_respond_info("Print Volume Limits:
                        Min X:%7.1f, Y:%7.1f, Z:%7.1f
                        Max X:%7.1f, Y:%7.1f, Z:%7.1f
                        Probe Area Limits:
                        Min X:%7.1f, Y:%7.1f
                        Max X:%7.1f, Y:%7.1f" % 
    (min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}

