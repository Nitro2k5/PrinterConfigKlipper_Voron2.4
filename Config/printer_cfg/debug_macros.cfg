
#####################################################################
#   debug_macros.cfg
#####################################################################


[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object.
gcode:
    {% set config = True if params.C or params.S else False %}
    {% set path = 'config'   if params.C else 'settings' if params.S %}
    {% set search = params.C if params.C else params.S if params.S else params.P if params.P %}
    {% set out = [] %}

    {% for name1 in printer|sort %}
        {% if config %}
            {% if name1 is in ['configfile'] %}
                {% for name2 in printer[name1][path]|sort %}
                    {% if name2 is in [search] %}
                        {% for name3, value in printer[name1][path][name2].items()|sort %}
                            {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % (path, name2, name3, value)) %}
                        {% endfor %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        {% else %}
            {% for name2, value in printer[name1].items()|sort %}
                {% if search is not defined and name1 is not in ['configfile'] %}
                    {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
                {% elif search is defined and name1 is in [search] %}
                    {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endfor %}

    {% if out|length > 0 %}
        {action_respond_info(out|join("\n"))}
    {% else %}
        {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
    {% endif %}


##-------------------------------------------------------------------


[gcode_macro DUMP_PRINT_AREA_LIMITS]
description: Debug: Print information about print volume and probeable area.
gcode:
    {% set min = printer.toolhead.axis_minimum %}
    {% set max = printer.toolhead.axis_maximum %}
    {% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
                           'y' : printer.configfile.settings.probe.y_offset} %}
    {% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
                                  'y' : [min.y,(min.y-probe_offset.y)]|max},
                         'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
                                  'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
    {action_respond_info("Print Volume Limits:
                          Min X:%7.1f, Y:%7.1f, Z:%7.1f
                          Max X:%7.1f, Y:%7.1f, Z:%7.1f
                          Probe Area Limits:
                          Min X:%7.1f, Y:%7.1f
                          Max X:%7.1f, Y:%7.1f" % 
    (min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}


##-------------------------------------------------------------------


[gcode_macro DUMP_VARIABLES]
description: Debug: Print variables of the printer object.
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}

    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    {action_respond_info(out|join("\n"))}


##-------------------------------------------------------------------


[gcode_macro GET_VARIABLE]
description: Debug: Get variables of the printer object.
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}

    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}

    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}

    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}

    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

