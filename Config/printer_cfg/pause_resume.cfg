
#####################################################################
#   pause_resume.cfg
#####################################################################


[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print.
rename_existing: BASE_PAUSE

gcode:
    {% set retract = params.RETRACT|default(50.0)|float %}                                       ; retract amount
    {% set z = params.Z|default(25.0)|float %}                                                   ; z hop amount
    {% set colorchange = params.COLORCHANGE|default('false') %}                                  ; set colorchange status

    {% if "xyz" in printer.toolhead.homed_axes %}                                                ; skip if axis not homed
        {% if printer['pause_resume'].is_paused|int == 0 %}                                      ; skip if already in pause

            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=colorchange VALUE={colorchange}

            SET_FILAMENT_SENSOR SENSOR=filament_runout ENABLE=0                                  ; disable filament sensor       

            SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
            BASE_PAUSE                                                                           ; pause print

            {action_respond_info("--- Printer PAUSED ---")}                                      ; status message

			{% if colorchange = true %}
                {action_respond_info("-> Colorchange active")}                                   ; status message
            {% endif %}

            {% if printer.extruder.can_extrude|lower == 'true' %}                                ; retract if possible
                M83                                                                              ; use relative distances for extrusion
                G1 E-{retract} F1500                                                             ; retract some amount (F1500 = 25mm/s)

                {% if printer.gcode_move.absolute_extrude|lower == 'true' %}
                    M82                                                                          ; use absolute distances for extrusion
                {% endif %}

                {action_respond_info("Retract value: %.2f mm" % (retract))}                      ; status message
                SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude VALUE={retract}                 ; set resume variable to extruded amount
            {% else %}
                {action_respond_info("Extruder not hot enough for retract")}                     ; if extruder is not hot enough, show message and set value for resume to 0
                SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude VALUE=0                         ; set resume variable to extruded amount
            {% endif %}

            {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
                G91                                                                              ; relative positioning
                G1 Z{z} F900                                                                     ; raise Z up by z hop amount (F900 = 15mm/s)
                {action_respond_info("Z-Hop value: %.2f mm" % (z))}                              ; status message
            {% else %}
                {action_respond_info("Pause zhop exceeds maximum Z height.")}                    ; if z max is exceeded, show message and set zhop value for resume to 0
                SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
            {% endif %}

            G90                                                                                  ; absolute positioning
            G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
            {action_respond_info("Park toolhead at:")}                                           ; status message
            {action_respond_info("X: %.2f mm" % (printer.toolhead.axis_maximum.x / 2))}          ; status message
            {action_respond_info("Y: %.2f mm" % (printer.toolhead.axis_minimum.y + 5))}          ; status message

            SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 

            STATUS_BUSY                                                                          ; set led status

            M104 S0                                                                              ; turn off hotend
            {action_respond_info("Turn off extruder heater")}                                    ; status message

            SET_IDLE_TIMEOUT TIMEOUT=86400                                                       ; set timeout to 24 hours
            { action_respond_info("Set idle timeout to: 86400 = 24h")}                           ; status message

            {action_respond_info("Waiting...")}                                                  ; status message
        {% endif %}

    {% else %}
        {action_respond_info("Printer not homed")}                                               ; status message
    {% endif %}


##-------------------------------------------------------------------


[gcode_macro RESUME]
description: Resume the actual running print.
rename_existing: BASE_RESUME

variable_extrude: 1.0
variable_zhop: 0
variable_etemp: 0
variable_colorchange: false

gcode:
    {% set e = params.E|default(1.0)|float + extrude %}                                          ; hotend prime amount (in mm)
    {% set extruder_temp = printer[printer.toolhead.extruder].temperature %}
    {% set min_extrude_temp = printer.configfile.settings.extruder.min_extrude_temp %}

    {% if printer['pause_resume'].is_paused|int == 1 %}                                          ; check if print is paused

        {action_respond_info("--- Print RESUMED ---")}                                           ; status message

        SET_FILAMENT_SENSOR SENSOR=filament_runout ENABLE=1                                      ; enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}              ; set timeout back to configured value

        {% if etemp > 0 %}
            {action_respond_info("Wait for hotend temp: %3.1fÂ°C" % (etemp))}                     ; status message
            M109 S{etemp|int}                                                                    ; wait for hotend to heat back up
        {% else %}
            {action_respond_info("No hotend temp is set, resume without heating")}               ; status message
        {% endif %}

        {% if (colorchange|lower == 'true') and (extruder_temp >= min_extrude_temp) %}           ; check extruder temp
            {action_respond_info("Preset extruder temp is high enough for purging...")}          ; status message
            BEEP                                                                                 ; play tone
            BEEP                                                                                 ; play tone
            # PURGE_M600                                                                         ; purge after color change
        {% elif (colorchange|lower == 'false') and (extruder_temp >= min_extrude_temp) %}
            {action_respond_info("Prime nozzle without color change...")}                        ; status message
            # MOVETO_CLEAN_NOZZLE_M600                                                           ; purge after color change
            M83                                                                                  ; relative extruder positioning
            G1 E{e} F600                                                                         ; extrude the retracted amount
        {% else %}
            {action_respond_info("Preset extruder temp to low for purging...")}                  ; status message
        {% endif %}
        BEEP                                                                                     ; play tone
        # CLEAN_NOZZLE_M600                                                                      ; brush nozzle after pause

        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=colorchange VALUE='"false"'                      ; reset colorchange status
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=300                                 ; go back to parked position
        G91                                                                                      ; relative positioning
        M83                                                                                      ; relative extruder positioning
        {action_respond_info("Lower Z")}                                                         ; status message
        G1 Z{zhop * -1} F900                                                                     ; lower Z back down without priming
        STATUS_PRINTING                                                                          ; set led status
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=300                                     ; restore position
        {action_respond_info("Resume print...")}                                                 ; status message
        BASE_RESUME                                                                              ; resume print
    {% endif %}


##-------------------------------------------------------------------


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print.
rename_existing: CANCEL_PRINT_BASE
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                  ; set timeout back to configured value
    CLEAR_PAUSE                                                                                  ; reset printing status
    SDCARD_RESET_FILE                                                                            ; reset printing status
    {action_respond_info("--- CANCELING Print ---")}                                             ; status message
    PRINT_END                                                                                    ; call print end for cleanup
    CANCEL_PRINT_BASE                                                                            ; cancel print

