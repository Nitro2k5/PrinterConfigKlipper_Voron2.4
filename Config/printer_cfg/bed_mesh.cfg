
#####################################################################
#   bed_mesh.cfg
#####################################################################


[bed_mesh]
speed: 500
horizontal_move_z: 5
mesh_min: 35, 35
mesh_max: 315,315
fade_start: 0.6
fade_end: 10.0
probe_count: 9,9
algorithm: bicubic



#####################################################################
#   Bed Mesh Macros
#####################################################################


[gcode_macro BED_MESH_CALIBRATE]
description: Creates a bedmesh using the bedprobe.
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set printer_state = printer.print_stats.state %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}

    { action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(
        all_points | count,
        bed_mesh_min,
        bed_mesh_max,
    )) }

    {% set x_min = [ bed_mesh_min[0], x_min ] | max %}
    {% set y_min = [ bed_mesh_min[1], y_min ] | max %}
    {% set x_max = [ bed_mesh_max[0], x_max ] | min %}
    {% set y_max = [ bed_mesh_max[1], y_max ] | min %}
   
    { action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(
        (x_min, y_min), 
        (x_max, y_max),
    )) }
    
    {% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
    {% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
    
    {% if (([points_x, points_y]|max) > 6) %}
        {% set algorithm = "bicubic" %}
        {% set min_points = 4 %}
    {% else %}
        {% set algorithm = "lagrange" %}
        {% set min_points = 3 %}
    {% endif %}
    { action_respond_info( "Algorithm: {}".format(algorithm)) }
    
    {% set points_x = [points_x, min_points]|max  %}
    {% set points_y = [points_y, min_points]|max  %}
    { action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }

    {% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}
        {% set ref_index = (points_x * points_y / 2) | int %}
        { action_respond_info( "Reference index: {}".format(ref_index) ) }  
    {% else %}
        {% set ref_index = -1 %}
    {% endif %}

    M117 -> Bed Mesh Calibrate
    STATUS_MESHING

    _BED_MESH_CALIBRATE MESH_MIN={x_min},{y_min} MESH_MAX={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}

    M400

    {% if printer_state != 'printing' %}
        STATUS_READY
        M117
    {% endif %}


##-------------------------------------------------------------------


[gcode_macro BED_MESH]
description: CG28, CQGL and creates a bedmesh using the bedprobe.
gcode:
    CG28
    CQGL
    BED_MESH_CALIBRATE

