
#####################################################################
#   bed_mesh.cfg
#####################################################################


[bed_mesh]
speed: 300
horizontal_move_z: 10
mesh_min: 40, 40
mesh_max: 310,310
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5
algorithm: bicubic
relative_reference_index: 12


##-------------------------------------------------------------------


#Source: https://github.com/julianschill

#[gcode_macro BED_MESH_AREA]
#
#; minimum probe count
#variable_min_probe_count : 5
#
#gcode:
#    {% set max_probe_point_distance = params.MAX_DISTANCE|default(25.0)|float %} ; the maximum distance between two probe points 
#    {% set mesh_area_offset = params.MAX_DISTANCE|default(5.0)|float %}     ; the clearance between print area and probe area 
#
#    {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
#    {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
#    {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
#    {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
#    {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
#
#    {% set area_min_x = params.MIN_X|default(safe_min_x)|float %}
#    {% set area_min_y = params.MIN_Y|default(safe_min_y)|float %}
#    {% set area_max_x = params.MAX_X|default(safe_max_x)|float %}
#    {% set area_max_y = params.MAX_Y|default(safe_max_y)|float %}
#
#    {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|float %}
#    {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|float %}
#
#    {% set area_min_x = [area_min_x - mesh_area_offset, safe_min_x]|max  %}
#    {% set area_min_y = [area_min_y - mesh_area_offset, safe_min_y]|max  %}
#    {% set area_max_x = [area_max_x + mesh_area_offset, safe_max_x]|min  %}
#    {% set area_max_y = [area_max_y + mesh_area_offset, safe_max_y]|min  %}
#
#    { action_respond_info( "Start: " + area_min_x|string + "," + area_min_y|string ) }
#    { action_respond_info( "End:   " + area_max_x|string + "," + area_max_y|string ) }
#
#    {% set points_x = (((area_max_x - area_min_x) / ( 2 * max_probe_point_distance)) | int) * 2 + 1 %}
#    {% set points_y = (((area_max_y - area_min_y) / ( 2* max_probe_point_distance)) | int) * 2 + 1 %}
#
#    {% set points_x = [points_x, min_probe_count]|max  %}
#    {% set points_y = [points_y, min_probe_count]|max  %}
#
#    { action_respond_info( "Points: x:" + points_x|string + " y:" + points_y|string ) }
#
#    {% set ref_index = (points_x * points_y / 2) | int %}
#    { action_respond_info( "Reference index: " + ref_index|string) }
#
#    BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={points_x},{points_y} relative_reference_index={ref_index}


##-------------------------------------------------------------------


#Source: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging

# # # Klipper Adaptive Meshing # # #

# Heads up! If you have any other BED_MESH_CALIBRATE macros defined elsewhere in your config, you will need to comment out / remove them for this to work. (Klicky/Euclid Probe)
# You will also need to be sure that [exclude_object] is defined in printer.cfg, and your slicer is labeling objects.
# This macro will parse information from objects in your gcode to define a min and max mesh area to probe, creating an adaptive mesh!
# This macro will not increase probe_count values in your [bed_mesh] config. If you want richer meshes, be sure to increase probe_count. We recommend at least 5,5.

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE

### This section allows control of status LEDs your printer may have.

variable_led_enable: True              # Enables/disables the use of status LEDs in this macro.
variable_status_macro: 'status_meshing' # If you have status LEDs in your printer (StealthBurner), you can use the macro that changes their status here.

### This section configures mesh point fuzzing, which allows probe points to be varied slightly if printing multiples of the same G-code file.

variable_fuzz_enable: False             # Enables/disables the use of mesh point fuzzing to slightly randomize probing points to spread out wear on a build surface, default is False.
variable_fuzz_min: 0                    # If enabled, the minimum amount in mm a probe point can be randomized, default is 0.
variable_fuzz_max: 4                    # If enabled, the maximum amount in mm a probe point can be randomized, default is 4.

### This section is for those using a dockable probe that is stored outside of the print area. ###

variable_probe_dock_enable: True       # Enables/disables the use of a dockable probe that is stored outside of the print area, default is False.
variable_attach_macro: 'Attach_Probe'   # Here is where you define the macro that ATTACHES the probe to the printhead. E.g. 'Attach_Probe'
variable_detach_macro: 'Dock_Probe'     # Here is where you define the macro that DETACHES the probe from the printhead. E.g. 'Dock_Probe'

gcode:
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (printer.configfile.settings.bed_mesh.probe_count[0]-2)  %}
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (printer.configfile.settings.bed_mesh.probe_count[1]-2)  %}
    {% set x_min = bed_mesh_min[0] %}
    {% set y_min = bed_mesh_min[1] %}
    {% set x_max = bed_mesh_max[0] %}
    {% set y_max = bed_mesh_max[1] %}
    
    { action_respond_info("{} points, clamping to mesh [{!r} {!r}]".format(
        all_points | count,
        bed_mesh_min,
        bed_mesh_max,
    )) }

    {% if fuzz_enable == True %}
        {% if all_points %}
            {% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int) %}
            {% set x_min = ( bed_mesh_min[0], ((all_points | map(attribute=0) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[0])) ) | max %}
            {% set y_min = ( bed_mesh_min[1], ((all_points | map(attribute=1) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[1])) ) | max %}
            {% set x_max = ( bed_mesh_max[0], ((all_points | map(attribute=0) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[0])) ) | min %}
            {% set y_max = ( bed_mesh_max[1], ((all_points | map(attribute=1) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[1])) ) | min %}
        {% endif %}
    {% else %}
        {% set x_min = [ bed_mesh_min[0], (all_points | map(attribute=0) | min | default(bed_mesh_min[0])) ] | max %}
        {% set y_min = [ bed_mesh_min[1], (all_points | map(attribute=1) | min | default(bed_mesh_min[1])) ] | max %}
        {% set x_max = [ bed_mesh_max[0], (all_points | map(attribute=0) | max | default(bed_mesh_max[0])) ] | min %}
        {% set y_max = [ bed_mesh_max[1], (all_points | map(attribute=1) | max | default(bed_mesh_max[1])) ] | min %}
    {% endif %}
   
    { action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(
        (x_min, y_min), 
        (x_max, y_max),
    )) }
    
    {% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | int) + 2 %}
    {% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | int) + 2 %}
    
    {% if (([points_x, points_y]|max) > 6) %}
        {% set algorithm = "bicubic" %}
        {% set min_points = 4 %}
    {% else %}
        {% set algorithm = "lagrange" %}
        {% set min_points = 3 %}
    {% endif %}
    { action_respond_info( "Algorithm: {}".format(algorithm)) }
    
    {% set points_x = [points_x, min_points]|max  %}
    {% set points_y = [points_y, min_points]|max  %}
    { action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }

    {% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}
        {% set ref_index = (points_x * points_y / 2) | int %}
        { action_respond_info( "Reference index: {}".format(ref_index) ) }  
    {% else %}
        {% set ref_index = -1 %}
    {% endif %}

    {% if probe_dock_enable == True %}
        {attach_macro}              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}

    {% if led_enable == True %}
        {status_macro}              # Set status LEDs
    {% endif %}

    _BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}

    {% if probe_dock_enable == True %}
        {detach_macro}              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}

